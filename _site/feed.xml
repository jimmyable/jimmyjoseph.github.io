<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Joseph</title>
    <description>A blog of stuff I find interesting/learning</description>
    <link>http://jimmyjoseph.co.uk/</link>
    <atom:link href="http://jimmyjoseph.co.uk/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 03 Nov 2018 15:02:38 +0000</pubDate>
    <lastBuildDate>Sat, 03 Nov 2018 15:02:38 +0000</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>The Big O</title>
        <description>&lt;h1 id=&quot;what-is-the-big-o&quot;&gt;What is the “Big O”&lt;/h1&gt; &lt;p&gt;&lt;strong&gt;Big O&lt;/strong&gt;, is a metric used to describe how &lt;em&gt;complex&lt;/em&gt; an algorithm is. Not understanding is might lead to algorithms or code that is unnecessarily complex.&lt;/p&gt; &lt;h1 id=&quot;the-analogy&quot;&gt;The Analogy&lt;/h1&gt; &lt;p&gt;You want to send file X to friend A. He lives 500 miles away. If the file was 1MB then sending it using the internet would be the quickest. But what if the file is 100MB? Sure it’s slower than transferring 1MB but quicker than driving 500 miles?&lt;/p&gt; &lt;p&gt;Now what about 1TB? or 100TB? Now driving might be quicker.&lt;/p&gt; &lt;h1 id=&quot;time-complexity&quot;&gt;Time Complexity&lt;/h1&gt; &lt;p&gt;An algorithm is...</description>
        <pubDate>Sat, 06 Oct 2018 13:49:47 +0100</pubDate>
        <link>http://jimmyjoseph.co.uk/the-big-o/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/the-big-o/</guid>
        
        <category>BigO</category>
        
        <category>CompSci</category>
        
        <category>complexity</category>
        
        
        <category>CompSci</category>
        
      </item>
    
      <item>
        <title>Farming Likes on Instagram</title>
        <description>&lt;h1 id=&quot;what-is-farming-likes&quot;&gt;What is farming likes?&lt;/h1&gt; &lt;p&gt;Farming likes usually takes the form of posting “click-bait” articles or photos. Sometimes it is possible to pay to buy followers and likes/dislikes for your/someone else’s posts. What’s the point? &lt;code class=&quot;highlighter-rouge&quot;&gt;To get more likes on posts&lt;/code&gt;, yeah this is society now.&lt;/p&gt; &lt;p&gt;Anyways, there is another way!&lt;/p&gt; &lt;h1 id=&quot;gets-bots-to-do-your-dirty-work&quot;&gt;Gets Bots to do your dirty work&lt;/h1&gt; &lt;p&gt;&lt;a href=&quot;https://timgrossmann.github.io/InstaPy/&quot;&gt;InstaPy&lt;/a&gt; is a bot thats designed for exactly this. &lt;strong&gt;“An automation script that uses your Instagram account to like and follow others with the aim of them liking and following back”.&lt;/strong&gt;&lt;/p&gt; &lt;h1 id=&quot;so-whats-the-gist&quot;&gt;So whats the gist?&lt;/h1&gt; &lt;p&gt;You give your...</description>
        <pubDate>Tue, 28 Aug 2018 21:52:47 +0100</pubDate>
        <link>http://jimmyjoseph.co.uk/farming-likes-on-instagram/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/farming-likes-on-instagram/</guid>
        
        <category>Instagram</category>
        
        <category>farming</category>
        
        <category>Likes</category>
        
        <category>InstaPy</category>
        
        <category>python</category>
        
        
        <category>Miscellaneous</category>
        
      </item>
    
      <item>
        <title>Hexagonal Laptop Stickers</title>
        <description>&lt;p&gt;So Let’s make some stickers. I will be using &lt;a href=&quot;https://www.gimp.org/&quot;&gt;GIMP&lt;/a&gt;, since it’s free. I will be using sticker paper to print the final A4 page onto.&lt;/p&gt;

&lt;h1 id=&quot;making-a-hexagonal-grid&quot;&gt;Making a hexagonal grid&lt;/h1&gt;

&lt;p&gt;I used this &lt;a href=&quot;https://www.youtube.com/watch?v=dHYTjFNSb9w&quot;&gt;video&lt;/a&gt; to create a hex grid in python.&lt;/p&gt;

&lt;p&gt;Then I simply searchred for high-res transparent logos(.png) and imported them into GIMP as a Layer. Some logos required a fill to make it look better. I mainly used colours from the &lt;a href=&quot;https://material.io/design/color/the-color-system.html&quot;&gt;Material Design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final product looks like this:
&lt;img src=&quot;/assets/img/Stickers/stickers.png&quot; alt=&quot;Output&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Aug 2018 13:41:47 +0100</pubDate>
        <link>http://jimmyjoseph.co.uk/laptop-stickers/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/laptop-stickers/</guid>
        
        <category>gimp</category>
        
        <category>hexagon</category>
        
        <category>stickers</category>
        
        <category>brands</category>
        
        <category>google</category>
        
        
        <category>Miscellaneous</category>
        
      </item>
    
      <item>
        <title>Given an array, find the two indices that sum to a specific value.</title>
        <description>&lt;h1 id=&quot;given-an-array-find-the-two-indices-that-sum-to-a-specific-value&quot;&gt;Given an array, find the two indices that sum to a specific value.&lt;/h1&gt; &lt;p&gt;Try to understand Method #2, its pretty clever imo.&lt;/p&gt; &lt;h2 id=&quot;tets-cases&quot;&gt;Tets cases&lt;/h2&gt; &lt;p&gt;Let’s define some test cases now.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;None input -&amp;gt; TypeError&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; -&amp;gt; ValueError&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[1, 3, 2, -7, 5], 7 &lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;[2, 4]&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;method-1&quot;&gt;Method 1&lt;/h2&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;two_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span...</description>
        <pubDate>Fri, 22 Jun 2018 11:24:47 +0100</pubDate>
        <link>http://jimmyjoseph.co.uk/given-an-array-find-the-two-indices-that-sum-to-a-specific-value/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/given-an-array-find-the-two-indices-that-sum-to-a-specific-value/</guid>
        
        <category>python</category>
        
        <category>find</category>
        
        <category>arrays</category>
        
        <category>strings</category>
        
        
        <category>Arrays and Strings</category>
        
      </item>
    
      <item>
        <title>Find the single different char between two strings</title>
        <description>&lt;h1 id=&quot;find-the-single-different-char-between-two-strings&quot;&gt;Find the single different char between two strings.&lt;/h1&gt; &lt;p&gt;Again, simple puzzle. We just have to find the different unique letter the second string has and first one doesn’t&lt;/p&gt; &lt;h2 id=&quot;tets-cases&quot;&gt;Tets cases&lt;/h2&gt; &lt;p&gt;Let’s define some test cases now.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;None input -&amp;gt; TypeError&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'abcd'&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'abcde'&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;'e'&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'aaabbcdd'&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'abdbacade'&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;'e'&lt;/code&gt; &lt;h2 id=&quot;method-1&quot;&gt;Method 1&lt;/h2&gt; &lt;/li&gt; &lt;/ul&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;...</description>
        <pubDate>Thu, 21 Jun 2018 00:11:47 +0100</pubDate>
        <link>http://jimmyjoseph.co.uk/find-the-single-different-char-between-two-strings/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/find-the-single-different-char-between-two-strings/</guid>
        
        <category>python</category>
        
        <category>find</category>
        
        <category>arrays</category>
        
        <category>strings</category>
        
        
        <category>Arrays and Strings</category>
        
      </item>
    
      <item>
        <title>Reverse characters in a string(in-place)</title>
        <description>&lt;h1 id=&quot;reverse-characters-in-a-stringin-place&quot;&gt;Reverse characters in a string(in-place)&lt;/h1&gt; &lt;p&gt;Self explanatory really, pretty much if x=[“x”,”y”,”Z”] was fed in, then the output should be x=[“z”,”y”,”x”].&lt;/p&gt; &lt;h2 id=&quot;tets-cases&quot;&gt;Tets cases&lt;/h2&gt; &lt;p&gt;Let’s define some test cases now.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;None -&amp;gt; None&lt;/li&gt; &lt;li&gt;[’’] -&amp;gt; [’’]&lt;/li&gt; &lt;li&gt;[‘f’, ‘o’, ‘o’, ‘ ‘, ‘b’, ‘a’, ‘r’] -&amp;gt; [‘r’, ‘a’, ‘b’, ‘ ‘, ‘o’, ‘o’, ‘f’]&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;method-1&quot;&gt;Method 1&lt;/h2&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReverseString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#print(chars, &quot;+++&quot;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span...</description>
        <pubDate>Wed, 20 Jun 2018 00:02:47 +0100</pubDate>
        <link>http://jimmyjoseph.co.uk/reverse-characters-in-a-string/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/reverse-characters-in-a-string/</guid>
        
        <category>python</category>
        
        <category>reverse</category>
        
        <category>arrays</category>
        
        <category>strings</category>
        
        
        <category>Arrays and Strings</category>
        
      </item>
    
      <item>
        <title>Compress a String</title>
        <description>&lt;h1 id=&quot;string-compression&quot;&gt;String Compression&lt;/h1&gt; &lt;p&gt;It is possible to compress a string such that, a string orginally &lt;code class=&quot;highlighter-rouge&quot;&gt;AAABBCCCDD&lt;/code&gt; becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;A3B2C3D2&lt;/code&gt;. In thi case we will only compress in order to save space. So for example &lt;code class=&quot;highlighter-rouge&quot;&gt;AABB&lt;/code&gt; wouldn’t be compressed to &lt;code class=&quot;highlighter-rouge&quot;&gt;A2B2&lt;/code&gt; because it saves no space.&lt;/p&gt; &lt;h2 id=&quot;tets-cases&quot;&gt;Tets cases&lt;/h2&gt; &lt;p&gt;Let’s define some test cases now.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;None -&amp;gt; None&lt;/li&gt; &lt;li&gt;’’ -&amp;gt; ‘’&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AABBCC&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;AABBCC&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AAABCCDDDD&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;A3BC2D4&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompressString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span...</description>
        <pubDate>Sat, 17 Mar 2018 08:05:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/compress-string/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/compress-string/</guid>
        
        <category>python</category>
        
        <category>rotational</category>
        
        <category>test</category>
        
        <category>arrays</category>
        
        <category>strings</category>
        
        
        <category>Arrays and Strings</category>
        
      </item>
    
      <item>
        <title>Rotational Characters</title>
        <description>&lt;h1 id=&quot;rotational-characters&quot;&gt;Rotational Characters&lt;/h1&gt; &lt;p&gt;If a word is rotated then it keeps its oringal order but the sequence might start or end at a different point. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;OGOGOG&lt;/code&gt; is a rotation of &lt;code class=&quot;highlighter-rouge&quot;&gt;GOGOGO&lt;/code&gt;, but not &lt;code class=&quot;highlighter-rouge&quot;&gt;GGGOOO&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;GGOOGO&lt;/code&gt;. Another example is &lt;code class=&quot;highlighter-rouge&quot;&gt;Tree&lt;/code&gt; which can be rotated to get &lt;code class=&quot;highlighter-rouge&quot;&gt;reeT&lt;/code&gt;.&lt;/p&gt; &lt;h2 id=&quot;tets-cases&quot;&gt;Tets cases&lt;/h2&gt; &lt;p&gt;Let’s define some test cases now.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Any strings that differ in size &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'foo'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt; (any None results in False)&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;' '&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'foo'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;' '&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;' '&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;True&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code...</description>
        <pubDate>Mon, 12 Mar 2018 07:41:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/rotation-characters/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/rotation-characters/</guid>
        
        <category>python</category>
        
        <category>rotational</category>
        
        <category>test</category>
        
        <category>arrays</category>
        
        <category>strings</category>
        
        
        <category>Arrays and Strings</category>
        
      </item>
    
      <item>
        <title>Permutation of Characters</title>
        <description>&lt;h1 id=&quot;permuatation-of-characters&quot;&gt;Permuatation of characters&lt;/h1&gt; &lt;p&gt;So what are we doing here? we are checking if both strings contains the same characters but in a different order i.e permutation.&lt;/p&gt; &lt;h2 id=&quot;test-cases&quot;&gt;Test cases&lt;/h2&gt; &lt;p&gt;The following test cases must produce these results.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;One or more None inputs &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;One or more empty strings &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'Nib'&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'bin'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'act'&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'cat'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;True&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'a ct'&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'ca t'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;True&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Permutations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_permutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span...</description>
        <pubDate>Wed, 07 Mar 2018 07:17:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/permutations/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/permutations/</guid>
        
        <category>python</category>
        
        <category>permutation</category>
        
        <category>test</category>
        
        <category>arrays</category>
        
        <category>strings</category>
        
        
        <category>Arrays and Strings</category>
        
      </item>
    
      <item>
        <title>Unique Characters</title>
        <description>&lt;h1 id=&quot;unique-characters&quot;&gt;Unique Characters&lt;/h1&gt; &lt;p&gt;We want to use python to build an algorithm that can check if a given string contains all unique characters. Run the code with the unit test to confirm its validity.&lt;/p&gt; &lt;h2 id=&quot;test-cases&quot;&gt;Test cases&lt;/h2&gt; &lt;p&gt;We will use the following test cases to determine if the algorithm is correct.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;''&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;True&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'foo'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'bar'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;True&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UniqueChars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;has_unique_chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;...</description>
        <pubDate>Fri, 02 Mar 2018 20:40:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/unique-characters/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/unique-characters/</guid>
        
        <category>python</category>
        
        <category>unique</category>
        
        <category>test</category>
        
        <category>arrays</category>
        
        <category>strings</category>
        
        
        <category>Arrays and Strings</category>
        
      </item>
    
  </channel>
</rss>
