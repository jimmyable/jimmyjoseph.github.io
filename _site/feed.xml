<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Joseph</title>
    <description>A blog of stuff I find interesting/learning</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 28 Nov 2018 15:51:57 +0000</pubDate>
    <lastBuildDate>Wed, 28 Nov 2018 15:51:57 +0000</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>Regularization and Gradient Descent</title>
        <description>&lt;h1 id=&quot;regularization-and-gradient-descent&quot;&gt;Regularization and Gradient Descent&lt;/h1&gt; &lt;p&gt;In this worked example we will explore &lt;code class=&quot;highlighter-rouge&quot;&gt;regression&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;polynomial features&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;regularization&lt;/code&gt; using very simple sparse data.&lt;/p&gt; &lt;p&gt;First we import the data, which contains and x and y columns of noisy data.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data/X_Y_Sinusoid_Data.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Now we will generate 100 equally spaced &lt;strong&gt;x&lt;/strong&gt; data points and over the range of 0 to 1. Using these points we will generate the &lt;strong&gt;y&lt;/strong&gt; points of &lt;em&gt;ground truth&lt;/em&gt; from...</description>
        <pubDate>Tue, 27 Nov 2018 07:26:47 +0000</pubDate>
        <link>http://localhost:4000/regularization-gradient-descent/</link>
        <guid isPermaLink="true">http://localhost:4000/regularization-gradient-descent/</guid>
        
        <category>python</category>
        
        <category>regularization</category>
        
        <category>machine learning</category>
        
        <category>numpy</category>
        
        <category>scikit</category>
        
        <category>stochastic gradient descent</category>
        
        <category>ridge regression</category>
        
        <category>scaling</category>
        
        <category>lasso regression</category>
        
        <category>elastic net</category>
        
        
        <category>Intel AI Machine Leaning</category>
        
      </item>
    
      <item>
        <title>Data Splitting &amp; Cross Validation</title>
        <description>&lt;h1 id=&quot;splitting-and-cross-validation&quot;&gt;Splitting and Cross Validation&lt;/h1&gt; &lt;p&gt;If we use all the available data to train and test the model then the model is overfitting the data. This means the model is really good at passing the test stage because it has seen all the examples beforehand.&lt;/p&gt; &lt;p&gt;The aim of ML is to create a generalised model, which can be tested on unseen data. To do this we split the available data into a train and test datasets.&lt;/p&gt; &lt;p&gt;Furthermore we can perform cross-validation, which is essentially shuffling training and test data to see the effects on the errors produced.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Underfitting&lt;/strong&gt; -...</description>
        <pubDate>Mon, 19 Nov 2018 04:55:47 +0000</pubDate>
        <link>http://localhost:4000/data-splitting-cross-val/</link>
        <guid isPermaLink="true">http://localhost:4000/data-splitting-cross-val/</guid>
        
        <category>python</category>
        
        <category>knn</category>
        
        <category>machine learning</category>
        
        <category>numpy</category>
        
        <category>scikit</category>
        
        <category>cross validation</category>
        
        <category>splitting</category>
        
        <category>scaling</category>
        
        
        <category>Intel AI Machine Leaning</category>
        
      </item>
    
      <item>
        <title>KNN Example</title>
        <description>&lt;h1 id=&quot;k-nearest-neighbors-example&quot;&gt;K Nearest Neighbors Example&lt;/h1&gt; &lt;p&gt;Using the telecom customer churn data we will do some preprocessing and the use a KNN model to make some predictions. First we will import the .csv file and display its contents&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileloc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'data/Orange_Telecom_Churn_Data.csv'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;&lt;img src=&quot;/assets/img/IntelAI/knn1.png&quot; alt=&quot;Output&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt; &lt;h1 id=&quot;pre-processing&quot;&gt;Pre-processing&lt;/h1&gt; &lt;p&gt;Some features such as &lt;strong&gt;state, area code, phone number&lt;/strong&gt; are not useful for the predictive model...</description>
        <pubDate>Fri, 09 Nov 2018 09:41:47 +0000</pubDate>
        <link>http://localhost:4000/knn-example/</link>
        <guid isPermaLink="true">http://localhost:4000/knn-example/</guid>
        
        <category>python</category>
        
        <category>knn</category>
        
        <category>machine learning</category>
        
        <category>numpy</category>
        
        <category>scikit</category>
        
        <category>classification</category>
        
        <category>feature scaling</category>
        
        <category>regression</category>
        
        <category>knn</category>
        
        <category>telecoms</category>
        
        <category>accuracy</category>
        
        
        <category>Intel AI Machine Leaning</category>
        
      </item>
    
      <item>
        <title>[Book Review] - FOCUS</title>
        <description>&lt;h1 id=&quot;focus&quot;&gt;&lt;strong&gt;FOCUS&lt;/strong&gt;&lt;/h1&gt; &lt;h1 id=&quot;part-1---finding-your-focus&quot;&gt;&lt;em&gt;Part 1 - Finding your Focus&lt;/em&gt;&lt;/h1&gt; &lt;h2 id=&quot;ch1-your-vital-20&quot;&gt;CH1 Your vital 20%&lt;/h2&gt; &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;80/20&lt;/code&gt; rule. Use it to filter your life commitments.&lt;/p&gt; &lt;p&gt;Every morning when you wake up take a minute to remind what you’re thankful in life and things you’re looking forward to that day.&lt;/p&gt; &lt;p&gt;20% of bad thoughts cause 80% of the worries. Note good points throughout the day and compliment yourself on why even the most trivial ones(since you worry about trivial negatives).&lt;/p&gt; &lt;p&gt;Compliment others on their positive work.&lt;/p&gt; &lt;p&gt;At the end of the day, look over the events of the day highlighting good...</description>
        <pubDate>Sun, 04 Nov 2018 14:26:47 +0000</pubDate>
        <link>http://localhost:4000/book-focus/</link>
        <guid isPermaLink="true">http://localhost:4000/book-focus/</guid>
        
        <category>Focus</category>
        
        <category>Development</category>
        
        <category>Time-Management</category>
        
        
        <category>Books</category>
        
      </item>
    
      <item>
        <title>The Big O</title>
        <description>&lt;h1 id=&quot;what-is-the-big-o&quot;&gt;What is the “Big O”&lt;/h1&gt; &lt;p&gt;&lt;strong&gt;Big O&lt;/strong&gt;, is a metric used to describe how &lt;em&gt;complex&lt;/em&gt; an algorithm is. Not understanding is might lead to algorithms or code that is unnecessarily complex.&lt;/p&gt; &lt;h1 id=&quot;the-analogy&quot;&gt;The Analogy&lt;/h1&gt; &lt;p&gt;You want to send file X to friend A. He lives 500 miles away. If the file was 1MB then sending it using the internet would be the quickest. But what if the file is 100MB? Sure it’s slower than transferring 1MB but quicker than driving 500 miles?&lt;/p&gt; &lt;p&gt;Now what about 1TB? or 100TB? Now driving might be quicker.&lt;/p&gt; &lt;h1 id=&quot;time-complexity&quot;&gt;Time Complexity&lt;/h1&gt; &lt;p&gt;An algorithm is...</description>
        <pubDate>Sat, 06 Oct 2018 13:49:47 +0100</pubDate>
        <link>http://localhost:4000/the-big-o/</link>
        <guid isPermaLink="true">http://localhost:4000/the-big-o/</guid>
        
        <category>BigO</category>
        
        <category>CompSci</category>
        
        <category>complexity</category>
        
        
        <category>CompSci</category>
        
      </item>
    
      <item>
        <title>Farming Likes on Instagram</title>
        <description>&lt;h1 id=&quot;what-is-farming-likes&quot;&gt;What is farming likes?&lt;/h1&gt; &lt;p&gt;Farming likes usually takes the form of posting “click-bait” articles or photos. Sometimes it is possible to pay to buy followers and likes/dislikes for your/someone else’s posts. What’s the point? &lt;code class=&quot;highlighter-rouge&quot;&gt;To get more likes on posts&lt;/code&gt;, yeah this is society now.&lt;/p&gt; &lt;p&gt;Anyways, there is another way!&lt;/p&gt; &lt;h1 id=&quot;gets-bots-to-do-your-dirty-work&quot;&gt;Gets Bots to do your dirty work&lt;/h1&gt; &lt;p&gt;&lt;a href=&quot;https://timgrossmann.github.io/InstaPy/&quot;&gt;InstaPy&lt;/a&gt; is a bot thats designed for exactly this. &lt;strong&gt;“An automation script that uses your Instagram account to like and follow others with the aim of them liking and following back”.&lt;/strong&gt;&lt;/p&gt; &lt;h1 id=&quot;so-whats-the-gist&quot;&gt;So whats the gist?&lt;/h1&gt; &lt;p&gt;You give your...</description>
        <pubDate>Tue, 28 Aug 2018 21:52:47 +0100</pubDate>
        <link>http://localhost:4000/farming-likes-on-instagram/</link>
        <guid isPermaLink="true">http://localhost:4000/farming-likes-on-instagram/</guid>
        
        <category>Instagram</category>
        
        <category>farming</category>
        
        <category>Likes</category>
        
        <category>InstaPy</category>
        
        <category>python</category>
        
        
        <category>Miscellaneous</category>
        
      </item>
    
      <item>
        <title>Hexagonal Laptop Stickers</title>
        <description>&lt;p&gt;So Let’s make some stickers. I will be using &lt;a href=&quot;https://www.gimp.org/&quot;&gt;GIMP&lt;/a&gt;, since it’s free. I will be using sticker paper to print the final A4 page onto.&lt;/p&gt;

&lt;h1 id=&quot;making-a-hexagonal-grid&quot;&gt;Making a hexagonal grid&lt;/h1&gt;

&lt;p&gt;I used this &lt;a href=&quot;https://www.youtube.com/watch?v=dHYTjFNSb9w&quot;&gt;video&lt;/a&gt; to create a hex grid in python.&lt;/p&gt;

&lt;p&gt;Then I simply searchred for high-res transparent logos(.png) and imported them into GIMP as a Layer. Some logos required a fill to make it look better. I mainly used colours from the &lt;a href=&quot;https://material.io/design/color/the-color-system.html&quot;&gt;Material Design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final product looks like this:
&lt;img src=&quot;/assets/img/Stickers/stickers.png&quot; alt=&quot;Output&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 20 Aug 2018 13:41:47 +0100</pubDate>
        <link>http://localhost:4000/laptop-stickers/</link>
        <guid isPermaLink="true">http://localhost:4000/laptop-stickers/</guid>
        
        <category>gimp</category>
        
        <category>hexagon</category>
        
        <category>stickers</category>
        
        <category>brands</category>
        
        <category>google</category>
        
        
        <category>Miscellaneous</category>
        
      </item>
    
      <item>
        <title>Given an array, find the two indices that sum to a specific value.</title>
        <description>&lt;h1 id=&quot;given-an-array-find-the-two-indices-that-sum-to-a-specific-value&quot;&gt;Given an array, find the two indices that sum to a specific value.&lt;/h1&gt; &lt;p&gt;Try to understand Method #2, its pretty clever imo.&lt;/p&gt; &lt;h2 id=&quot;tets-cases&quot;&gt;Tets cases&lt;/h2&gt; &lt;p&gt;Let’s define some test cases now.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;None input -&amp;gt; TypeError&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; -&amp;gt; ValueError&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[1, 3, 2, -7, 5], 7 &lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;[2, 4]&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;method-1&quot;&gt;Method 1&lt;/h2&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;two_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span...</description>
        <pubDate>Fri, 22 Jun 2018 11:24:47 +0100</pubDate>
        <link>http://localhost:4000/given-an-array-find-the-two-indices-that-sum-to-a-specific-value/</link>
        <guid isPermaLink="true">http://localhost:4000/given-an-array-find-the-two-indices-that-sum-to-a-specific-value/</guid>
        
        <category>python</category>
        
        <category>find</category>
        
        <category>arrays</category>
        
        <category>strings</category>
        
        
        <category>Arrays and Strings</category>
        
      </item>
    
      <item>
        <title>Find the single different char between two strings</title>
        <description>&lt;h1 id=&quot;find-the-single-different-char-between-two-strings&quot;&gt;Find the single different char between two strings.&lt;/h1&gt; &lt;p&gt;Again, simple puzzle. We just have to find the different unique letter the second string has and first one doesn’t&lt;/p&gt; &lt;h2 id=&quot;tets-cases&quot;&gt;Tets cases&lt;/h2&gt; &lt;p&gt;Let’s define some test cases now.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;None input -&amp;gt; TypeError&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'abcd'&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'abcde'&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;'e'&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'aaabbcdd'&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'abdbacade'&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;'e'&lt;/code&gt; &lt;h2 id=&quot;method-1&quot;&gt;Method 1&lt;/h2&gt; &lt;/li&gt; &lt;/ul&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt;...</description>
        <pubDate>Thu, 21 Jun 2018 00:11:47 +0100</pubDate>
        <link>http://localhost:4000/find-the-single-different-char-between-two-strings/</link>
        <guid isPermaLink="true">http://localhost:4000/find-the-single-different-char-between-two-strings/</guid>
        
        <category>python</category>
        
        <category>find</category>
        
        <category>arrays</category>
        
        <category>strings</category>
        
        
        <category>Arrays and Strings</category>
        
      </item>
    
      <item>
        <title>Reverse characters in a string(in-place)</title>
        <description>&lt;h1 id=&quot;reverse-characters-in-a-stringin-place&quot;&gt;Reverse characters in a string(in-place)&lt;/h1&gt; &lt;p&gt;Self explanatory really, pretty much if x=[“x”,”y”,”Z”] was fed in, then the output should be x=[“z”,”y”,”x”].&lt;/p&gt; &lt;h2 id=&quot;tets-cases&quot;&gt;Tets cases&lt;/h2&gt; &lt;p&gt;Let’s define some test cases now.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;None -&amp;gt; None&lt;/li&gt; &lt;li&gt;[’’] -&amp;gt; [’’]&lt;/li&gt; &lt;li&gt;[‘f’, ‘o’, ‘o’, ‘ ‘, ‘b’, ‘a’, ‘r’] -&amp;gt; [‘r’, ‘a’, ‘b’, ‘ ‘, ‘o’, ‘o’, ‘f’]&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;method-1&quot;&gt;Method 1&lt;/h2&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ReverseString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#print(chars, &quot;+++&quot;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chars&lt;/span&gt; &lt;span...</description>
        <pubDate>Wed, 20 Jun 2018 00:02:47 +0100</pubDate>
        <link>http://localhost:4000/reverse-characters-in-a-string/</link>
        <guid isPermaLink="true">http://localhost:4000/reverse-characters-in-a-string/</guid>
        
        <category>python</category>
        
        <category>reverse</category>
        
        <category>arrays</category>
        
        <category>strings</category>
        
        
        <category>Arrays and Strings</category>
        
      </item>
    
  </channel>
</rss>
