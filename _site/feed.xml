<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jimmy Joseph</title>
    <description>A blog of stuff I find interesting/learning</description>
    <link>http://jimmyjoseph.co.uk/</link>
    <atom:link href="http://jimmyjoseph.co.uk/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 21 Mar 2018 11:11:24 +0000</pubDate>
    <lastBuildDate>Wed, 21 Mar 2018 11:11:24 +0000</lastBuildDate>
    <generator>Jekyll v3.7.2</generator>
    
      <item>
        <title>Compress a String</title>
        <description>&lt;h1 id=&quot;rotational-characters&quot;&gt;Rotational Characters&lt;/h1&gt; &lt;p&gt;If a word is rotated then it keeps its oringal order but the sequence might start or end at a different point. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;OGOGOG&lt;/code&gt; is a rotation of &lt;code class=&quot;highlighter-rouge&quot;&gt;GOGOGO&lt;/code&gt;, but not &lt;code class=&quot;highlighter-rouge&quot;&gt;GGGOOO&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;GGOOGO&lt;/code&gt;. Another example is &lt;code class=&quot;highlighter-rouge&quot;&gt;Tree&lt;/code&gt; which can be rotated to get &lt;code class=&quot;highlighter-rouge&quot;&gt;reeT&lt;/code&gt;.&lt;/p&gt; &lt;h2 id=&quot;tets-cases&quot;&gt;Tets cases&lt;/h2&gt; &lt;p&gt;Let’s define some test cases now.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Any strings that differ in size &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'foo'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt; (any None results in False)&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;' '&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'foo'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;' '&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;' '&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;True&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code...</description>
        <pubDate>Sat, 17 Mar 2018 08:05:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/compress-string/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/compress-string/</guid>
        
        <category>python</category>
        
        <category>rotational</category>
        
        <category>test</category>
        
        
        <category>Problems</category>
        
      </item>
    
      <item>
        <title>Rotational Characters</title>
        <description>&lt;h1 id=&quot;rotational-characters&quot;&gt;Rotational Characters&lt;/h1&gt; &lt;p&gt;If a word is rotated then it keeps its oringal order but the sequence might start or end at a different point. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;OGOGOG&lt;/code&gt; is a rotation of &lt;code class=&quot;highlighter-rouge&quot;&gt;GOGOGO&lt;/code&gt;, but not &lt;code class=&quot;highlighter-rouge&quot;&gt;GGGOOO&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;GGOOGO&lt;/code&gt;. Another example is &lt;code class=&quot;highlighter-rouge&quot;&gt;Tree&lt;/code&gt; which can be rotated to get &lt;code class=&quot;highlighter-rouge&quot;&gt;reeT&lt;/code&gt;.&lt;/p&gt; &lt;h2 id=&quot;tets-cases&quot;&gt;Tets cases&lt;/h2&gt; &lt;p&gt;Let’s define some test cases now.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Any strings that differ in size &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'foo'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt; (any None results in False)&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;' '&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'foo'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;' '&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;' '&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;True&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code...</description>
        <pubDate>Mon, 12 Mar 2018 07:41:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/rotation-characters/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/rotation-characters/</guid>
        
        <category>python</category>
        
        <category>rotational</category>
        
        <category>test</category>
        
        
        <category>Problems</category>
        
      </item>
    
      <item>
        <title>Permutation of Characters</title>
        <description>&lt;h1 id=&quot;permuatation-of-characters&quot;&gt;Permuatation of characters&lt;/h1&gt; &lt;p&gt;So what are we doing here? we are checking if both strings contains the same characters but in a different order i.e permutation.&lt;/p&gt; &lt;h2 id=&quot;test-cases&quot;&gt;Test cases&lt;/h2&gt; &lt;p&gt;The following test cases must produce these results.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;One or more None inputs &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;One or more empty strings &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'Nib'&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'bin'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'act'&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'cat'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;True&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'a ct'&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;'ca t'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;True&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Permutations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_permutation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span...</description>
        <pubDate>Wed, 07 Mar 2018 07:17:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/permutations/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/permutations/</guid>
        
        <category>python</category>
        
        <category>permutation</category>
        
        <category>test</category>
        
        
        <category>Problems</category>
        
      </item>
    
      <item>
        <title>Unique Characters</title>
        <description>&lt;h1 id=&quot;unique-characters&quot;&gt;Unique Characters&lt;/h1&gt; &lt;p&gt;We want to use python to build an algorithm that can check if a given string contains all unique characters. Run the code with the unit test to confirm its validity.&lt;/p&gt; &lt;h2 id=&quot;test-cases&quot;&gt;Test cases&lt;/h2&gt; &lt;p&gt;We will use the following test cases to determine if the algorithm is correct.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;''&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;True&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'foo'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'bar'&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;strong&gt;True&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UniqueChars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;has_unique_chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;...</description>
        <pubDate>Fri, 02 Mar 2018 20:40:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/unique-characters/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/unique-characters/</guid>
        
        <category>python</category>
        
        <category>unique</category>
        
        <category>test</category>
        
        
        <category>Problems</category>
        
      </item>
    
      <item>
        <title>Artificial Neurons</title>
        <description>&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt; &lt;p&gt;Neural networks are old, the first models appeared in the early 1940’s, and the idea has been refined by many generations of great scientists. They took inspiration from biology to create a mathematical model, that takes in signals from previous neurons to generate signals that match the input. By layering many neurons, one can create a sophisticated model that can work as a useful function approximator.&lt;/p&gt; &lt;h2 id=&quot;neural-net-structure&quot;&gt;Neural Net Structure&lt;/h2&gt; &lt;p&gt;A neural network &lt;code class=&quot;highlighter-rouge&quot;&gt;maps inputs to outputs&lt;/code&gt;. You can think of it as a complex computational engine that can be trained to learn the features of a...</description>
        <pubDate>Sun, 25 Feb 2018 15:57:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/neurons/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/neurons/</guid>
        
        <category>sigmoid</category>
        
        <category>bias</category>
        
        <category>neural nets</category>
        
        <category>training</category>
        
        <category>layers</category>
        
        
        <category>Neural Networks</category>
        
      </item>
    
      <item>
        <title>YOLO</title>
        <description>&lt;h1 id=&quot;darknet&quot;&gt;DarkNet&lt;/h1&gt; &lt;p&gt;Joseph Redmon showcased DarkNet at &lt;a href=&quot;https://www.ted.com/talks/joseph_redmon_how_a_computer_learns_to_recognize_objects_instantly?language=en&quot;&gt;TED2017&lt;/a&gt;. Less than a decade ago classification problems between a cat or dog was almost impossible, but advances in deep learning has changed that. Joseph worked on YOLO which is a revolutionary system that can identify objects it has been trained on, and it does it incredibly fast.&lt;/p&gt; &lt;p&gt;Fast enough and accurate enough to track objects in live video feeds. This technology can be employed in self-driving cars, CCTV cameras, factory lines etc.&lt;/p&gt; &lt;h1 id=&quot;how-to-install&quot;&gt;How to install&lt;/h1&gt; &lt;p&gt;Joseph has a pretty good guide on his &lt;a href=&quot;https://pjreddie.com/darknet/install/&quot;&gt;website&lt;/a&gt;. But I will explain some...</description>
        <pubDate>Sat, 17 Feb 2018 14:07:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/yolo/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/yolo/</guid>
        
        <category>yolo</category>
        
        <category>object detection</category>
        
        <category>neural nets</category>
        
        <category>cuda</category>
        
        <category>opencv</category>
        
        
        <category>Neural Networks</category>
        
      </item>
    
      <item>
        <title>Gradient Descent</title>
        <description>&lt;h1 id=&quot;gradient-descent&quot;&gt;Gradient Descent&lt;/h1&gt; &lt;p&gt;Gradient descent is an iterative optimization algorithm for finding the minimum of a function. The basic idea is, we have a cost function that we want to minimize. We start from a point calculate the negative gradient and move further in that direction, eventually reaching the minimum.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/assets/img/NeuralNets/1.png&quot; alt=&quot;Output&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;gd-with-linear-regression&quot;&gt;GD with Linear Regression&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Say we have two parameters affecting the cost function (β0,β1)&lt;/li&gt; &lt;li&gt;This creates a surface as shown below rather than a line as above&lt;/li&gt; &lt;li&gt;Now how can we find the minimum without knowing how the surface J(β0,β1) looks like?&lt;/li&gt; &lt;/ul&gt;...</description>
        <pubDate>Thu, 15 Feb 2018 11:33:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/gradient-descent/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/gradient-descent/</guid>
        
        <category>gradient descent</category>
        
        <category>optimization</category>
        
        <category>neural nets</category>
        
        <category>stochastic</category>
        
        <category>mini-batch</category>
        
        
        <category>Neural Networks</category>
        
      </item>
    
      <item>
        <title>MultiAgent Systems</title>
        <description>&lt;h1 id=&quot;what-are-multiagent-systems&quot;&gt;What are MultiAgent Systems?&lt;/h1&gt; &lt;p&gt;MultiAgent systems is a field of Computer Science focusing on building autonomous agents, that can communicate with other agents.&lt;/p&gt; &lt;h1 id=&quot;why-multiagent-systems&quot;&gt;Why MultiAgent Systems?&lt;/h1&gt; &lt;p&gt;Computing is becoming more &lt;code class=&quot;highlighter-rouge&quot;&gt;ubiquitous&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;interconnected&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;intelligent&lt;/code&gt;, more and more tasks are &lt;code class=&quot;highlighter-rouge&quot;&gt;delegated&lt;/code&gt; to it, and it is becoming more &lt;code class=&quot;highlighter-rouge&quot;&gt;human-oriented&lt;/code&gt;. What does this mean? Computing itself is becoming faster and more efficient. The internet created a global network interconnected devices, and now we are seeing more and more tasks delegated to these systems. A good example is a self-driving car, almost unthinkable a decade ago.&lt;/p&gt; &lt;p&gt;As...</description>
        <pubDate>Mon, 12 Feb 2018 10:23:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/multiagent-systems/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/multiagent-systems/</guid>
        
        <category>agents</category>
        
        <category>society</category>
        
        <category>intelligence</category>
        
        <category>autonomy</category>
        
        <category>interacting</category>
        
        
        <category>Agents</category>
        
      </item>
    
      <item>
        <title>Intro to JADE</title>
        <description>&lt;h1 id=&quot;java-agent-development-framework&quot;&gt;&lt;em&gt;J&lt;/em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ava&lt;/code&gt; &lt;em&gt;A&lt;/em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gent&lt;/code&gt; &lt;em&gt;DE&lt;/em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;velopment&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;framework&lt;/code&gt;&lt;/h1&gt; &lt;p&gt;JADE is a framework in java that allows the realisation of agents and multi-agent systems. It complies with the &lt;a href=&quot;http://www.fipa.org/&quot;&gt;FIPA&lt;/a&gt; specifications. The agent platform can be distributed within a network and thus does not need to reside within one machine/OS.&lt;/p&gt; &lt;h2 id=&quot;jade-adminstration-tutorial&quot;&gt;JADE Adminstration Tutorial&lt;/h2&gt; &lt;p&gt;Introducing the notions of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Agent&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Container&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Platform&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Main Container&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AMS&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DF&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Follow the figure below. A JADE application will have &lt;code class=&quot;highlighter-rouge&quot;&gt;Agent&lt;/code&gt; elements, each with a unique name(A1,A2,..). &lt;code class=&quot;highlighter-rouge&quot;&gt;Agents&lt;/code&gt; act and interact by exchanging messages.&lt;/p&gt; &lt;p&gt;Agents...</description>
        <pubDate>Fri, 09 Feb 2018 14:21:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/jade/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/jade/</guid>
        
        <category>java</category>
        
        <category>FIPA</category>
        
        <category>agents</category>
        
        <category>queues</category>
        
        <category>compile</category>
        
        
        <category>Agents</category>
        
      </item>
    
      <item>
        <title>K-nearest Neighbours</title>
        <description>&lt;h1 id=&quot;what-is-machine-learning&quot;&gt;What is Machine Learning?&lt;/h1&gt; &lt;p&gt;Machine Learning is using a computer to learn features and trends from data. Just like humans, a machine algorithm should increase its &lt;code class=&quot;highlighter-rouge&quot;&gt;Performance&lt;/code&gt; through increased &lt;code class=&quot;highlighter-rouge&quot;&gt;Experience&lt;/code&gt;, meaning it should get better with more data.&lt;/p&gt; &lt;p&gt;Machine Learning is already with us in many services we use:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Spam Filtering&lt;/li&gt; &lt;li&gt;Search engines&lt;/li&gt; &lt;li&gt;Fraud/Anomaly detection&lt;/li&gt; &lt;li&gt;Speech Recognition&lt;/li&gt; &lt;li&gt;Self-Driving cars&lt;/li&gt; &lt;li&gt;Recommendation Systems(Amazon/Netflix)&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;there-are-two-main-types-of-machine-learning&quot;&gt;There are two main types of machine learning:&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Supervised&lt;/strong&gt; - Data points have known outcome&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Unsupervised&lt;/strong&gt; - Data points have unknown outcome&lt;/p&gt; &lt;p&gt;We’re going to focus on &lt;strong&gt;Supervised&lt;/strong&gt; learning here, and it can...</description>
        <pubDate>Fri, 09 Feb 2018 11:19:47 +0000</pubDate>
        <link>http://jimmyjoseph.co.uk/supervised-knn/</link>
        <guid isPermaLink="true">http://jimmyjoseph.co.uk/supervised-knn/</guid>
        
        <category>python</category>
        
        <category>knn</category>
        
        <category>machine learning</category>
        
        <category>numpy</category>
        
        <category>scikit</category>
        
        <category>classification</category>
        
        <category>feature scaling</category>
        
        <category>regression</category>
        
        
        <category>ML &amp; Data Mining</category>
        
      </item>
    
  </channel>
</rss>
